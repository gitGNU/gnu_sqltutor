@c This file is intended to be included within another document,
@c hence no sectioning command or @node.

SQLtutor is a CGI script and a PostgreSQL database of SQL tutorials,
collections of SQL questions and answers.  All SQLtutor database
objects are defined in the SCHEMA @code{sqltutor}.

Five output variables are defined in @file{configure.ac} with the
following implicit values.

@table @env
@item SQLTUTOR_DATABASE=sqltutor
PostgreSQL database name used by SQLtutor.

@item SQLTUTOR_WWW_USER=sqlquiz
WWW user for CGI script @code{sqlutor} with full access rights to all
tables.

@item SQLTUTOR_PASSWORD=sqlkrok
Password for CGI script for the user @env{SQLTUTOR_WWW_USER}

@item SQLTUTOR_WWW_EXEC=sqlexec
Database role used for running queries entered by
users. @env{SQLTUTOR_WWW_EXEC} is granted @code{SLECT} to datasets'
tables and revoked all rigths on all other @code{sqltutor} tables.

@item SQLTUTOR_PASSEXEC=sqlkrok
Password for CGI script for the user @env{SQLTUTOR_WWW_EXEC}
(implicitly the same password as for @env{SQLTUTOR_WWW_USER}).
@end table

@noindent These macros are used by all modules and you can change
their implicit values if needed in the @file{configure.ac} file.

@section Building sqltutor

To build CGI script @file{sqltutor} go to SQLtutor home directory, run

@example
   ./configue 
   make -C sqltutor
@end example

@noindent and copy @file{sqltutor/sqltutor} to the cgi-bin directory.
Ensure that the file permissions are readable and executable by all
(-rwxr-xr-x).

For general information on using GNU autotool see the standard Basic
Installation instructions in the @file{INSTALL}.

@section Creating the database 

To create a database, the PostgreSQL server must be up and
running. Database is created with SQL command

@example
CREATE DATABASE SQLTUTOR_DATABASE
@end example

Two database roles must be created for SQLtutor with SQL command
@code{CREATE ROLE}

@example
CREATE ROLE SQLTUTOR_WWW_USER LOGIN;
CREATE ROLE SQLTUTOR_WWW_EXEC LOGIN;
@end example 

@noindent To set passwords for these new roles run @command{psql} and
enter SQL @command{ALTER} command

@example
ALTER USER SQLTUTOR_WWW_USER WITH PASSWORD 'xxx';
ALTER USER SQLTUTOR_WWW_EXEC WITH PASSWORD 'yyy';
@end example

@noindent or passwords can be set directly when creating roles

@example
CREATE ROLE SQLTUTOR_WWW_USER PASSWORD 'xxx' LOGIN;
CREATE ROLE SQLTUTOR_WWW_EXEC PASSWORD 'yyy' LOGIN;
@end example


If PostgreSQL language is not defined in datatabase @code{template1}
you must create it explicitly in the SQLtutor database

@example
su -
su - postgres
psql SQLTUTOR_DATABASE
CREATE LANGUAGE plpgsql;
@end example

@section Populating the database

Database is populated simply by running

@example
make install
@end example

@noindent from the main source directory.

Apart from module @code{sqltutor} there are three modules responsible
for populating the database

@table @samp
@item database
SQL schema @code{sqltutor}, general SQL tables and functions

@item tutorial
tutorials table

@item datasets
dataset tables which are used by one or more tutorials
@end table

These three modules can be installed explicitly by running @code{make
install} in their corresponding subdirectories.

@subsection Creating schema and general tables

Module @code{database} creates SQL SCHEMA sqltutor and all system
tables used by SQLtutor . This module must be installed before
populating the database.

@example
make -C database install
@end example

The @code{database} modules creates a lock file @file{lock..database}
that protects against inelligible recreation of the database. If you
want to rebuild the dayabase from the scratch, you must remove the
lock file either manully or by running

@example
make -C database clean
@end example

@subsection Populating tutorials and datasets

Run in any order from the project home directory

@example
make -C tutorials install
make -C datasets  install
@end example

@noindent If old tutorials and/or datasets have been installed, run

@example
make -C tutorials clean install
make -C datasets  clean install
@end example



